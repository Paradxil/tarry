import {colors_list} from '../../utils/theme.js';
import timezones from 'timezones-list';
import ServerProxy from '../../utils/serverproxy.js';
import {applySettings} from '../../utils/settings.js';

class {
    onCreate() {
        this.state = {
            settings: {'primary-color': {}, 'secondary-color': {}}
        };

        this.getSettings();
    }

    getSettings() {
        ServerProxy.getSettings((settings)=> {
            for(let setting of settings) {
                if(setting.name in this.state.settings) {
                    this.state.settings[setting.name] = setting;
                }
            }
        });
    }

    setSetting(name, event) {
        this.state.settings[name].name = name; 
        this.state.settings[name].value = event.value;
        this.saveSetting(this.state.settings[name]);
    }

    saveSetting(setting) {
        if(setting._id != null) {
            ServerProxy.updateSetting(setting, (s)=>{
                window.sessionStorage.setItem(s.name, s.value);
                applySettings();
            });
        }
        else {
            ServerProxy.addSetting(setting, (s)=>{
                window.sessionStorage.setItem(s.name, s.value);
                setting = s;
                applySettings();
            });
        }
    }
}

macro|{name, renderBody}| name="setting"
    ui-linear-layout aligncenter padded
        @element fillspace
            ui-text -- ${name}
        @element
            <${renderBody}/>

ui-linear-layout vertical
    @element
        widget title="Appearance"
            ui-linear-layout vertical
                @element
                    ui-color-select label="Primary Color" colors=colors_list on-input("setSetting", "primary-color")
                @element
                    ui-color-select label="Accent Color" colors=colors_list on-input("setSetting", "secondary-color")
    @element
        widget title="Local"
            ui-linear-layout vertical
                @element
                    setting name="Hour Format"
                        ui-select rounded options=[{value: "24", text: "24 Hour"}, {value: "12", text: "12 Hour"}] on-input("setSetting", "hour-format")
                @element
                    setting name="Time Zone"
                        ui-select rounded options=timezones.map((tz)=>{return {value: tz.tzCode, text: tz.label}}) on-input("setSetting", "time-zone")