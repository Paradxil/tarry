import ServerProxy from "../../../utils/serverproxy.js";
import {dateInPast, now} from "../../../utils/dateutils.js";

class {
    onCreate(input) {
        this.state = {
            invoice: null,
            selectedProjects: [],
            addresses: [],
            addressesMap: {},
            unsaved: false
        };

        this.expenseNameComponent = null;
        this.expenseAmountComponent = null;
        this.addClientPopout = null;
        this.invoicePreviewComponent = null;

        ServerProxy.getAddresses((addresses, map)=>{
            this.state.addressesMap = map;
            this.state.addresses = addresses;

            // Add fields for use with the combobox.
            for(let address of this.state.addresses) {
                address.value = address._id;
                address.search = (address.name||"") + " " + (address.email||"") + " " + (address.company||"") + " " + (address.phone||"");
            }
        });

        if(input.params.id=='new') {
            this.state.invoice = {
                id: "0000",
                start: dateInPast(7),
                end: now(),
                expenses: [],
                data: {},
                projects: [],
                billfrom: null,
                billto: null
            };
            this.loadData();
        }
        else {
            ServerProxy.getInvoice(input.params.id, (invoice)=>{
                this.state.invoice = invoice;
                this.setStateDirty('invoice');
                this.loadData();
            });
        }
    }

    loadData() {
        ServerProxy.generateReport(this.state.invoice.start, this.state.invoice.end, this.state.invoice.projects, this.state.invoice.tasks, (report) => {
            this.state.invoice.data = report;
            this.invoicePreviewComponent.setInvoice(this.state.invoice);
            this.setStateDirty('invoice');
        });
    }

    onMount() {
        this.expenseNameComponent = this.getComponent("expense-name");
        this.expenseAmountComponent = this.getComponent("expense-amount");
        this.addClientPopout = this.getComponent("add-client-popout");
        this.invoicePreviewComponent = this.getComponent("invoice-preview");
    }

    onUpdate() {
        // For some reason I have to reassign these variables on update.
        // I think this is due to an issue with the 'key' property and 
        // how MarkoJS handles updating items in a for loop.
        // These variables no longer reference the correct object after
        // adding a new expense and rerendering the expense list.
        this.expenseNameComponent = this.getComponent("expense-name");
        this.expenseAmountComponent = this.getComponent("expense-amount");
        this.addClientPopout = this.getComponent("add-client-popout");
        this.invoicePreviewComponent = this.getComponent("invoice-preview");
    }

    previewInvoice() {
        this.saveInvoice(()=>{
            window.open("/invoices/view/"+this.state.invoice._id);
        });
    }

    saveInvoice(cb) {
        let invoice = this.state.invoice;
        invoice.billto = invoice.billto?invoice.billto._id||null:null;
        invoice.billfrom = invoice.billfrom?invoice.billfrom._id||null:null;

        if(invoice._id) {
            ServerProxy.updateInvoice(invoice._id, invoice, (newinvoice)=> {
                this.state.invoice = newinvoice;
                this.state.unsaved = false;
                if(cb) {
                    cb();
                }
            });
        }
        else {
            ServerProxy.addInvoice(invoice, (newinvoice)=> {
                this.state.invoice = newinvoice;
                this.state.unsaved = false;
                if(cb) {
                    cb();
                }
            });
        }
    }

    showAddClientPopout() {
        this.addClientPopout.clearAddress();
        this.addClientPopout.toggleVisibility();
    }

    async editClient(id) {
        await this.addClientPopout.loadAddress(id);
        this.addClientPopout.toggleVisibility();
    }

    updateSelectedProjects(event) {
        this.state.selectedProjects = event.selected;
        this.state.invoice.projects = event.selected;
        this.setStateDirty("selectedProjects");
        this.loadData();
    }

    addExpense() {
        let amt = parseInt(this.expenseAmountComponent.getValue());
        if(isNaN(amt)) {
            amt = 0;
        }

        let name = this.expenseNameComponent.getValue();

        if(name == null || name.length === 0) {
            return;
        }

        this.state.invoice.expenses.push({
            name: name,
            amount: amt
        });

        this.expenseAmountComponent.setValue("");
        this.expenseNameComponent.setValue("");

        this.setStateDirty("invoice");
        this.loadData();
    }

    removeExpense(index) {
        this.state.invoice.expenses.splice(index, 1);
        this.setStateDirty("invoice");
        this.loadData();
    }

    setInvoiceValue(id, event) {
        this.state.invoice[id] = event.value;
        this.loadData();
    }

    setAddress(id, event) {
        this.state.invoice[id] = this.state.addressesMap[event.value];
        this.loadData();
    }
}

style {
    .ui-textbox, .ui-date-select-wrapper {
        border: none !important;
        background-color: #f8f9fa;
        transition: border 0.5s;
    }

    .ui-textbox:focus {
        background-color: var(--secondary-light);
    }

    .ui-textbox:hover,.ui-date-select-wrapper:hover {
        background-color: var(--secondary-light) !important;
    }

    .ui-textbox-label {
        color: var(--tertiary-dark);
    }

    .new-client-button em {
        width: 100%;
    }

    .invoice-edit-controls {
        flex: 2;
        min-width: 300px;
    }

    .invoice-edit-preview {
        flex: 3;
        min-width: 400px;
    }
}

app-layout currentpage="invoices" fullwidth returnto="invoices"
    if(state.invoice != null)
        edit-client-popout key="add-client-popout"
        ui-linear-layout wrap
            @element.invoice-edit-controls
                ui-linear-layout vertical gutter="16px"
                    @element
                        widget title="Edit Invoice"
                            @subtitle
                                controls [
                                    controls = [
                                        {
                                            name: "save",
                                            title: "Save",
                                            icon: "save"
                                        },
                                        {
                                            name: "preview",
                                            title: "View preview",
                                            icon: "eye"
                                        }
                                    ]
                                    on-save("saveInvoice", ()=>{})
                                    on-preview("previewInvoice")
                                ]
                            ui-linear-layout vertical padded
                                @element
                                    ui-linear-layout wrap
                                        @element
                                            ui-textbox label="Invoice ID" on-input('setInvoiceValue', 'id') value=state.invoice.id
                                        @element
                                            ui-date-select milliseconds=state.invoice.start label="From" rounded showtime=false on-input('setInvoiceValue', 'start')
                                        @element
                                            ui-date-select milliseconds=state.invoice.end label="To" rounded showtime=false on-input('setInvoiceValue', 'end')
                                @element
                                    ui-linear-layout aligncenter
                                        @element fillspace
                                            ui-combobox label="Bill From" options=state.addresses value=state.invoice.billfrom?state.invoice.billfrom.name:"" on-select('setAddress', 'billfrom') key="bill-from"
                                                @first fillspace
                                                    ui-button.new-client-button fillspace trailingicon="plus" on-click("showAddClientPopout")
                                                        ui-emphasis -- Add New Client
                                                @option|{option}|
                                                    ui-linear-layout fillspace
                                                        @element fillspace fullwidth
                                                            ui-linear-layout vertical gutter='0px' fillspace fullwidth
                                                                @element
                                                                    ui-text -- ${option.name}
                                                                @element
                                                                    ui-emphasis -- ${option.email}
                                                        @element
                                                            ui-button rounded icon="edit-2" on-click("editClient", option._id)
                                        @element
                                            ui-button filled disabled=state.invoice.billto==null rounded icon="edit-2" on-click("editClient")
                                @element
                                    ui-linear-layout aligncenter
                                        @element fillspace
                                            ui-combobox label="Bill To" options=state.addresses value=state.invoice.billto?state.invoice.billto.name:"" on-select('setAddress', 'billto') key="bill-to"
                                                @first fillspace
                                                    ui-button.new-client-button fillspace trailingicon="plus" on-click("showAddClientPopout")
                                                        ui-emphasis -- Add New Client
                                                @option|{option}|
                                                    ui-linear-layout fillspace
                                                        @element fillspace fullwidth
                                                            ui-linear-layout vertical gutter='0px' fillspace fullwidth
                                                                @element
                                                                    ui-text -- ${option.name}
                                                                @element
                                                                    ui-emphasis -- ${option.email}
                                                        @element
                                                            ui-button rounded icon="edit-2" on-click("editClient", option._id)
                                        @element
                                            ui-button filled disabled=state.invoice.billto==null rounded icon="edit-2" on-click("editClient")
                    @element
                        widget title="Filters"
                            ui-linear-layout vertical padded
                                @element
                                    project-filter selectedprojects=state.invoice.projects on-input("updateSelectedProjects")
                    @element
                        listwidget title="Expenses" items=state.invoice.expenses
                            @last key="add-expense"
                                ui-linear-layout fillspace fullwidth aligncenter key='last'
                                    @element fillspace
                                        ui-textbox label="Name" key="expense-name"
                                    @element fillspace
                                        ui-textbox label="Amount" key="expense-amount"
                                    @element
                                        ui-button rounded icon="save" title="Save Expense" on-click("addExpense")
                            @item|{data, index}|
                                ui-linear-layout aligncenter
                                    @element fillspace
                                        ui-text -- ${data.name}
                                    @element fillspace
                                        ui-text -- ${data.amount}
                                    @element
                                        ui-button icon="delete" title="Remove expense" rounded on-click("removeExpense", index)
            @element.invoice-edit-preview
                invoice-preview key="invoice-preview" invoice=state.invoice