import ServerProxy from "../../../utils/serverproxy.js";
import {dateInPast, now} from "../../../utils/dateutils.js";

class {
    onCreate() {
        this.state = {
            invoice: {
                expenses: []
            },
            selectedProjects: [],
            start: dateInPast(7),
            end: now(),
            addresses: [],
            addressesMap: {}
        };

        this.expenseNameComponent = null;
        this.expenseAmountComponent = null;
        this.addClientPopout = null;

        ServerProxy.getAddresses((addresses, map)=>{
            this.state.addressesMap = map;
            this.state.addresses = addresses;

            // Add fields for use with the combobox.
            for(let address of this.state.addresses) {
                address.value = address._id;
                address.search = address.name + " " + address.email + " " + address.company + " " + address.phone;
            }
        });
    }

    onMount() {
        this.expenseNameComponent = this.getComponent("expense-name");
        this.expenseAmountComponent = this.getComponent("expense-amount");
        this.addClientPopout = this.getComponent("add-client-popout");
    }

    onUpdate() {
        // For some reason I have to reassign these variables on update.
        // I think this is due to an issue with the 'key' property and 
        // how MarkoJS handles updating items in a for loop.
        // These variables no longer reference the correct object after
        // adding a new expense and rerendering the expense list.
        this.expenseNameComponent = this.getComponent("expense-name");
        this.expenseAmountComponent = this.getComponent("expense-amount");
    }

    showAddClientPopout() {
        this.addClientPopout.clearAddress();
        this.addClientPopout.toggleVisibility();
    }

    async editClient(id) {
        await this.addClientPopout.loadAddress(id);
        this.addClientPopout.toggleVisibility();
    }

    updateSelectedProjects(event) {
        this.state.selectedProjects = event.selected;
        this.setStateDirty("selectedProjects");
    }

    addExpense() {
        let amt = parseInt(this.expenseAmountComponent.getValue());
        if(isNaN(amt)) {
            amt = 0;
        }

        let name = this.expenseNameComponent.getValue();

        if(name == null || name.length === 0) {
            return;
        }

        this.state.invoice.expenses.push({
            name: name,
            amount: amt
        });

        this.expenseAmountComponent.setValue("");
        this.expenseNameComponent.setValue("");

        this.setStateDirty("invoice");
    }

    removeExpense(index) {
        this.state.invoice.expenses.splice(index, 1);
        this.setStateDirty("invoice");
    }
}

style {
    .ui-textbox, .ui-date-select-wrapper {
        border: none !important;
        background-color: #f8f9fa;
        transition: border 0.5s;
    }

    .ui-textbox:focus {
        background-color: var(--secondary-light);
    }

    .ui-textbox:hover,.ui-date-select-wrapper:hover {
        background-color: var(--secondary-light) !important;
    }

    .ui-textbox-label {
        color: var(--tertiary-dark);
    }

    .new-client-button p {
        width: 100%;
    }
}

app-layout currentpage="invoices"
    edit-client-popout key="add-client-popout"
    ui-linear-layout vertical gutter="16px"
        @element
            widget title="Edit Invoice"
                @subtitle
                    controls [
                        controls = [
                            {
                                name: "save",
                                title: "Save",
                                icon: "save"
                            },
                            {
                                name: "preview",
                                title: "View preview",
                                icon: "eye"
                            }
                        ]
                    ]
                ui-linear-layout vertical padded
                    @element
                        ui-linear-layout wrap
                            @element fillspace
                                ui-textbox label="Invoice ID"
                            @element
                                ui-date-select label="From" rounded showtime=false milliseconds=Date.now()
                            @element
                                ui-date-select label="To" rounded showtime=false milliseconds=Date.now()
                    @element
                        ui-linear-layout aligncenter
                            @element fillspace
                                ui-combobox label="Bill To" options=state.addresses
                                    @first fillspace
                                        ui-button.new-client-button fillspace trailingicon="plus" text="Add New Client" on-click("showAddClientPopout")
                                    @option|{option}|
                                        ui-linear-layout fillspace
                                            @element fillspace fullwidth
                                                ui-linear-layout vertical gutter='0px' fillspace fullwidth
                                                    @element
                                                        ui-text -- ${option.name}
                                                    @element
                                                        ui-emphasis -- ${option.email}
                                            @element
                                                ui-button rounded icon="edit-2" on-click("editClient", option._id)
                            @element
                                ui-button filled disabled=state.invoice.billto==null rounded icon="edit-2" on-click("editClient")
                    @element
                        ui-linear-layout aligncenter
                            @element fillspace
                                ui-combobox label="Bill To" options=state.addresses
                                    @first fillspace
                                        ui-button.new-client-button fillspace trailingicon="plus" text="Add New Client" on-click("showAddClientPopout")
                                    @option|{option}|
                                        ui-linear-layout fillspace
                                            @element fillspace fullwidth
                                                ui-linear-layout vertical gutter='0px' fillspace fullwidth
                                                    @element
                                                        ui-text -- ${option.name}
                                                    @element
                                                        ui-emphasis -- ${option.email}
                                            @element
                                                ui-button rounded icon="edit-2" on-click("editClient", option._id)
                            @element
                                ui-button filled disabled=state.invoice.billto==null rounded icon="edit-2" on-click("editClient")
        @element
            widget title="Filters"
                ui-linear-layout vertical padded
                    @element
                        project-filter on-input("updateSelectedProjects")
        @element
            listwidget title="Expenses" items=state.invoice.expenses
                @last key="add-expense"
                    ui-linear-layout fillspace fullwidth aligncenter key='last'
                        @element fillspace
                            ui-textbox label="Name" key="expense-name"
                        @element
                            ui-textbox label="Amount" key="expense-amount"
                        @element
                            ui-button rounded icon="save" title="Save Expense" on-click("addExpense")
                @item|{data, index}|
                    ui-linear-layout aligncenter
                        @element fillspace
                            ui-text -- ${data.name}
                        @element fillspace
                            ui-text -- ${data.amount}
                        @element
                            ui-button icon="delete" title="Remove expense" rounded on-click("removeExpense", index)
        @element
            widget title="Hours"
                ui-linear-layout vertical padded
                    @element
                        invoice-time-chart includedprojects=state.selectedProjects start=state.start end=state.end expenses=state.invoice.expenses