import ServerProxy from "../../utils/serverproxy.js";

class {
    onCreate(input) {
        this.state = {
            tasklist: []
        };

        this.taskmap = {};

        this.taskSelectComponent = null;
        this.taskPopout = null;

        this.loadTaskList();
    }

    onMount() {
        this.taskSelectComponent = this.getComponent("task-select");
        this.taskPopout = this.getComponent("task-popout");
    }

    setTask(taskid) {
        if(taskid in this.taskmap) {
            this.taskSelectComponent.setOption(this.taskToOption(this.taskmap[taskid]));
        }
    }

    clearTask() {
        this.taskSelectComponent.clearOption();
    }

    refreshTaskList(event) {
        this.taskSelectComponent.setOption(event.task);
        this.emit("select", {projectid: event.task.projectid, taskid: event.task._id});
        this.loadTaskList();
    }

    loadTaskList() {
        ServerProxy.getTasks((tasks, tasksMap) => {
            this.taskmap = tasksMap;
            this.state.tasklist = tasks.map((task) => {
                return this.taskToOption(task);
            });

            if(this.input.task) {
                this.setTask(this.input.task);
            }

            this.setStateDirty("tasklist");
            this.setStateDirty("task");
        });
    }

    // Translate a task into an option for the comobox input
    taskToOption(task) {
        return {
            search: task.name + " " + (task.project?task.project.name:""), 
            value: task.name, project: task.project?task.project.name:null, 
            color: task.project?task.project.color:null,
            taskid: task._id, 
            projectid: task.project?task.project._id:null,
            project: task.project?task.project:null
        }
    }

    selectTask(event) {
        this.emit("select", {projectid: event.option.projectid, taskid: event.option.taskid})
    }

    async editTask(taskid, event) {
        event.stopPropagation();
        this.taskPopout.clearTask();
        await this.taskPopout.loadTask(taskid);
        this.taskPopout.toggleVisibility();
    }

    async showTaskPopout() {
        this.taskPopout.clearTask();
        this.taskPopout.newTask();
        this.taskPopout.toggleVisibility();
    }
}

style {
    .task-select-add-button em {
        width: 100%;
    }
}

task-popout key="task-popout" on-saved("refreshTaskList")
ui-combobox.task-name class=input.class rounded key="task-select" label="Select Task" options=state.tasklist on-select("selectTask")
    @first
       ui-button.task-select-add-button rounded trailingicon="plus" on-click("showTaskPopout")
           ui-emphasis -- Add New Task
    @option|{option}|
        ui-linear-layout fillspace aligncenter
            @element fillspace
                ui-linear-layout vertical gutter="0px"
                    @element
                        ui-text -- ${option.value}
                    if(option.project)
                        @element
                            project project=option.project
            @element
                ui-button rounded icon="edit-2" on-click("editTask", option.taskid)