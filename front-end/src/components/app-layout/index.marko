import 'regenerator-runtime/runtime';
import ServerProxy from "../../utils/serverproxy.js";
import {hasCookie} from "../../utils/cookie.js";
import {emit} from "../../utils/events.js";
import {navigate} from 'simple-marko-router';

class {
    onCreate() {
        this.state = {
            ismobile: false,
            loggedin: true
        };

        this.loginPopout = null;
        this.sidebarComponent = null;
    }

    onMount() {
        this.sidebarComponent = this.getComponent("sidebar");
        this.loginPopout = this.getComponent("login-popout");

        /*let sessionExpires = sessionStorage.getItem("sessionexpires");

        if(sessionExpires <= Date.now()) {
            this.loggedin = false;
            this.loginPopout.toggleVisibility();
        }*/

        window.addEventListener("resize", this.onScreenResize.bind(this));
        this.state.ismobile = window.innerWidth<600||screen.width<600;
    }

    onScreenResize(event) {
        this.state.ismobile = window.innerWidth<600||screen.width<600;
    }

    toggleSidebar() {
        if(!this.sidebarComponent) {
            this.sidebarComponent = this.getComponent("sidebar");
        }
        this.sidebarComponent.toggle();
    }

    changePage(page) {
        navigate("/"+page);
    }
}

login-popout key='login-popout'
confirmation-dialogue
notification-popups

if(state.ismobile&&input.sidebar)
    topbar currentpage=input.title on-togglesidebar("toggleSidebar") returnto=input.returnto

if(input.sidebar)
    app-sidebar key="sidebar" currentpage=input.currentpage ismobile=state.ismobile

ui-linear-layout.page-wrapper fillspace fullwidth padded vertical class={"content-top-margin": state.ismobile, "mobile-page-wrapper": state.ismobile}
    @element 
        ui-linear-layout light aligncenter class={"limit-width":!input.fullwidth}
            if(input.returnto)
                @element
                    ui-button rounded icon="arrow-left" on-click("changePage", input.returnto)
            if(input.controls&&input.controls.renderBody)
                @element
                    <${input.controls.renderBody}/>
    @element.content-wrapper class={"limit-width":!input.fullwidth} fillspace fullwidth
        if(input.ready)
            <${input.renderBody} ismobile=state.ismobile/> 
        else
            loader

active-task-bar