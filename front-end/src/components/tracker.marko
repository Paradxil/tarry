import utils from '../utils.js';

class {
    async onCreate(input) {
        this.state = {
            tracking: false,
            startTime: null,
            project: null,
            now: Date.now(),
            name: "",
            entries: input.entries,
            projects: input.projects,
            editid: null,
            disabled: [],
            inputType: "timer",
            data: {},
            weeklyReport: {},
            frequentTasks: [],
            tasklist: []
        };

        this.userid = input.user?input.user._id||null:null;

        if(this.userid !== null) {
            this.getData();
        }
        else {
            this.emit('logout');
            return;
        }

        window.setInterval(()=>this.state.now = Date.now(), 500);
    }

    async getData() {
        let response = await utils.get("/api/task/active/");

        if(response.success) {
            let task = response.data;
            this.state.tracking = true;
            this.state.startTime = task.start;
            this.state.name = task.name;
            this.state.project = task.project;

            console.log(this.state.projects);

            this.getComponent("task-name").state.value = task.name;
            this.getComponent("task-name").getComponent("comboboxinput").state.value = task.name;
        }

        response = await utils.post("/api/report", {
            start: Date.now() - (1000*60*60*24*30), //Start date
            end: Date.now(), //End date
            projects: [], //A list of projectIDs to include in the report. Empty to include all projects.
            tasks: [] //A list of taskIDs to include in the report. Empty to include all tasks.
        });

        if(response.success) {
            this.state.data = response.data;
            this.state.data.days = this.state.data.days.reverse();
            this.state.tasklist = Object.values(response.data.tasks).map((el) => {return {search: el.name + " " + el.project.name, value: el.name, project: el.project.name, color: el.project.color, projectid: el.project._id};})
        }

        response = await utils.post("/api/report", {
            start: Date.now() - (1000 * 60 * 60 * 24 * 7),
            end: Date.now(),
            projects: [],
            tasks: []
        });

        if(response.success) {
            this.state.weeklyReport = response.data;
            this.state.frequentTasks = Object.values(response.data.tasks).sort((el1, el2) => {return el1.hoursTracked < el2.hoursTracked});
        }
    }

    changeInputType(type) {
        this.state.inputType = type;
    }

    onInput(input) {
        if(input.entries) {
            this.state.entries = input.entries;
        }
        if(input.projects) {
            this.state.projects = input.projects;
        }
    }

    confirmDeleteEntry(event) {
        this.emit("confirm", {
            title:"Delete Entry?", 
            message:"Are you sure you want to delete the entry for '" + event.entry.name + "' on " + new Date(event.entry.start).toDateString() + "? This cannot be undone.",
            actions: [
                {
                    text: "Yes",
                    icon: "check",
                    callback: ()=>{
                        this.deleteEntry(event); 
                        this.state.disabled.push(event.id);
                        this.setStateDirty("disabled");
                    }
                },
                {
                    text: "Cancel",
                    icon: "x",
                    callback: function() {}
                }
            ]}
        );
    }

    async deleteEntry(event) {
        let id = event.id;

        let response = await utils.delete("/api/time/"+id);

        if(response.success) {
            let index = event.index;
            this.state.entries.splice(index, 1);
            this.setStateDirty("entries");
        }
    }

    cancelEdit(event) {
        this.state.editid = null;
    }

    async saveEntry(event) {
        this.state.editid = null;
        let i = this.state.disabled.push(event.id)-1;
        this.setStateDirty("disabled");

        let entry = event.entry;
        let response = await utils.post("/api/time/update", {
            id: event.id,
            name: entry.name,
            project: entry.project,
            start: entry.start,
            end: entry.end
        });

        if(response.success) {
            let newentry = response.data;
            this.state.entries[newentry._id] = newentry;
            this.setStateDirty("entries");
        }

        this.state.disabled.splice(i, 1);
        this.setStateDirty("disabled");
    }

    editEntry(event) {
        this.state.editid = event.id;
    }

    async markTaskTodo(event) {
        let id = event.entry.taskid;
        let index = event.index;

        let response = await utils.post("/api/task/status", {
            userid: this.userid,
            taskid: id,
            status: "todo"
        });

        if(response.success) {
            for(let entry of this.input.entries) {
                if(entry.taskid === id) {
                    entry.status = "todo";
                }
            }
            this.state.entries = this.input.entries;
        }
    }

    async continueTask(event) {
        let entry = event.entry;
        let name = entry.name;
        let project = entry.project;
        if(!this.state.tracking) {
            this.state.project = project;
            this.getComponent("task-name").state.value = name;
            this.getComponent("task-name").getComponent("comboboxinput").state.value = name;
            this.getComponent("task-project").getComponent("comboboxinput").state.value = this.state.projects[project].name;
            this.startTracker(event);
        }
    }

    async startTracker(event) {
        this.state.name = this.getComponent("task-name").state.value;

        if(this.state.name === null || this.state.name.length === 0) {
            this.emit("push", {title: "Warning", message:"Unable to start tracker, no task name given."})
            return;
        }

        this.state.tracking = true;
        this.state.startTime = Date.now();
        this.state.now = Date.now();

        let response = await utils.post("/api/start", {
            userid: this.userid,
            name: this.state.name,
            start: this.state.startTime,
            project: this.state.project
        });

        if(!response.success) {
            console.log("Error starting tracking.");
            this.state.tracking = false;
        }
    }

    async stopTracker(event) {
        let response = await utils.post("/api/stop", {
            userid: this.userid,
            end: Date.now()
        });

        if(response.success) {
            this.state.entries.splice(0, 0, response.data);
            this.setStateDirty("entries");
            this.state.tracking = false;
            this.state.project = null;
            this.getComponent("task-name").getComponent("comboboxinput").state.value = "";
            this.getComponent("task-project").getComponent("comboboxinput").state.value = "";
        }
        else {
            console.log("Error stopping task!");
        }
    }

    selectProject(event) {
        if(event.option == null && event.option.value == null && event.option.projectid == null) {
            return;
        }

        this.getComponent("task-project").getComponent("comboboxinput").state.value = event.option.project||event.option.name;

        this.state.project = event.option.projectid||event.option.value;
    }

    removeProject() {
        this.state.project = null;
    }
}

style {
    ::selection {
        background-color: rgba(255, 255, 255, 0.25);
    }

    .stealthy {
        background-color: unset !important;
        border: none !important;
    }

    .page-content-wrapper > div {
        box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.15%);
        padding: var(--padding-wide);
        border-top-left-radius: var(--rounded-radius);
        border-top-right-radius: var(--rounded-radius);
    }

    .timer-header-wrapper, .page-content-wrapper {
        padding: 50px 100px !important;
        max-width: 1200px;
    }

    .timer-header-wrapper {
        font-size: 35px;
        font-weight: 100 !important;
        color: white !important;
    }

    .timer-header-wrapper input {
        color: white !important;
        border-radius: 0px !important;
    }

    .timer-header-wrapper input:focus {
        background-color: rgba(0,0,0,0.1) !important;
    }

    .timer-header-wrapper input:hover {
        background-color: rgba(0,0,0,0.1) !important;
    }

    .timer-header-wrapper .ui-text {
        font-weight: 100 !important;
    }

    .manual-input-wrapper {
        flex: 1;
        font-size: 100px;
        place-content: center;
        align-items: flex-end;
    }

    .manual-input-button {
        cursor: pointer;
    }

    .manual-input-button:hover {
        background-color: rgba(0,0,0,0.1) !important;
    }

    .task-name::placeholder, .project-select::placeholder {
        color: #f1f1f1;
    }

    .project-select {
        border: none;
        outline: none;
        background-color: unset;
    }

    .timer {
        font-size: 124px;
    }

    .daily-entries {
        opacity: 1;
        overflow: hidden;
        animation-name: slidein;
        animation-duration: 1s;
        animation-fill-mode: both;
    }

    .daily-entries > *:nth-child(even) {
        background-color: var(--primary-dark);
    }
    
    @keyframes slidein {
        from {opacity: 0;}
        to {opacity: 1;}
    }
}

page-background
ui-linear-layout.timer-header-wrapper light fullwidth vertical
    @element.timer-wrapper
        ui-linear-layout fullwidth
            @element
                ui-time.timer showseconds=true milliseconds=state.tracking?(state.now - state.startTime):0
            @element.manual-input-wrapper
                ui-button.manual-input-button icon=state.tracking?"x":"play" title=state.tracking?"Stop tracker":"Start tracker" on-click(state.tracking?"stopTracker":"startTracker")
    @element.task-name-wrapper
        ui-combobox.task-name.stealthy key="task-name" placeholder="Task name..." options=state.tasklist value=state.name||"" on-select("selectProject")
            @option|{option}|
                ui-linear-layout fillspace aligncenter
                    @element fillspace
                        ui-text -- ${option.value}
                    @element
                        ui-text style={color: option.color + " !important", fontSize: "14px"} -- ${option.project}
    @element.project-select-wrapper
        $ let options = Object.values(state.projects).map((item)=>{return {name: item.name, search: item.name, value: item._id}});
        ui-combobox.project-select.stealthy placeholder="Project" id="project-select" includeblank options=options key='task-project' on-select("selectProject")

ui-container.page-content-wrapper centered paddedwide
    ui-linear-layout vertical fillspace fullwidth
        @element padded
            ui-heading alignleft light -- Jump back in
        @element
            ui-linear-layout.daily-entries vertical gutter="0p" raised rounded filled
                for|task| of=state.frequentTasks
                    @element padded fillspace
                        ui-linear-layout padded aligncenter
                            @element fillspace
                                ui-text alignleft -- ${task.name}
                            @element
                                ui-text style={color: task.project.color} -- ${task.project.name}
                            @element
                                ui-button icon="play" rounded title="Start task" on-click("continueTask", {entry: {name: task.name, project: task.project._id}})
    ui-linear-layout vertical fillspace fullwidth gutter="8px"
        /*@element fillspace fullwidth
            ui-linear-layout
                @element
                    ui-button filled=state.inputType=="timer" icon="watch" rounded title="Timer input" on-click("changeInputType", "timer")
                @element
                    ui-button filled=state.inputType=="manual" icon="plus" rounded title="Manual input" on-click("changeInputType", "manual")
            ui-spacer space="5px"*/
                    
        @element fillspace
            ui-linear-layout vertical gutter="16px"
                for|day, index| of=state.data.days||[]
                    if(day.entries.length > 0)
                        @element
                            ui-linear-layout vertical
                                @element padded key=entry._id+"header"
                                    ui-linear-layout aligncenter light
                                        @element fillspace
                                            ui-heading heading=2 alignleft 
                                                ui-date milliseconds=day.date time=false
                                        @element
                                            ui-heading heading=2 -- ${day.hoursTracked.toFixed(2)}hrs
                                @element
                                    ui-linear-layout.daily-entries vertical filled rounded raised gutter="0"
                                        for|entry| of=day.entries
                                            @element paddedwide alignleft key=entry._id
                                                $ const controls = [{title:"Billable", name:"billable", icon:"dollar-sign"}, {title:"Continue task", name:"continue", icon:"play"}];
                                                $ const overlaycontrols = [
                                                    {title:"Delete entry", name:"delete", icon:"trash"}, 
                                                    {title:"Edit entry", name:"edit", icon:"edit-2"},
                                                    entry.status==="untracked"?{title:"Mark todo", name:"todo", icon:"flag"}:{title:"Mark completed", name:"complete", icon:"check"}
                                                ];
                                                entry disabled=state.disabled.includes(entry._id) index=index key="entry_"+entry._id edit=(state.editid===entry._id) entry=entry controls=controls overlaycontrols=overlaycontrols on-delete("confirmDeleteEntry") on-continue("continueTask") on-todo("markTaskTodo") on-edit("editEntry") on-cancel("cancelEdit") on-save("saveEntry")
                if(state.data == null || state.data.days == null)
                    @element fillspace
                        loading-spinner