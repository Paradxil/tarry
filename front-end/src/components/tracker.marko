import utils from '../utils.js';

class {
    async onCreate(input) {
        this.state = {
            tracking: false,
            startTime: null,
            project: null,
            now: Date.now(),
            name: "",
            entries: input.entries,
            projects: input.projects,
            editid: null
        };

        this.userid = input.user?input.user._id||null:null;

        if(this.userid !== null) {
            this.getData();
        }
        else {
            this.emit('logout');
            return;
        }

        window.setInterval(()=>this.state.now = Date.now(), 500);
    }

    async getData() {
        let response = await utils.get("/api/task/active/"+this.userid);

        if(response.success) {
            let task = response.data;
            this.state.tracking = true;
            this.state.startTime = task.start;
            this.state.name = task.name;
            this.state.project = task.project;
        }
    }

    onInput(input) {
        if(input.entries) {
            this.state.entries = input.entries;
        }
        if(input.projects) {
            this.state.projects = input.projects;
        }
    }

    confirmDeleteEntry(event) {
        this.emit("confirm", {
            title:"Delete Entry?", 
            message:"Are you sure you want to delete the entry for " + event.entry.name + " on " + new Date(event.entry.start).toDateString() + "? This cannot be undone.",
            actions: [
                {
                    text: "Yes",
                    icon: "check",
                    callback: ()=>this.deleteEntry(event)
                },
                {
                    text: "Cancel",
                    icon: "x",
                    callback: function() {}
                }
            ]}
        );
    }

    async deleteEntry(event) {
        let id = event.id;

        let response = await utils.delete("/api/time/"+id);

        if(response.success) {
            let index = event.index;
            this.state.entries.splice(index, 1);
            this.setStateDirty("entries");
        }
    }

    cancelEdit(event) {
        console.log(event);
        this.state.entries[this.state.editid] = event.entry;
        this.setStateDirty("entries");
        this.state.editid = null;
    }

    saveEntry(event) {

    }

    editEntry(event) {
        this.state.editid = event.id;
    }

    async markTaskTodo(event) {
        let id = event.entry.taskid;
        let index = event.index;

        let response = await utils.post("/api/task/status", {
            userid: this.userid,
            taskid: id,
            status: "todo"
        });

        if(response.success) {
            for(let entry of this.input.entries) {
                if(entry.taskid === id) {
                    entry.status = "todo";
                }
            }
            this.state.entries = this.input.entries;
        }
    }

    async continueTask(event) {
        let entry = event.entry;
        let name = entry.name;
        let project = entry.project;
        if(!this.state.tracking) {
            this.state.project = project;
            this.getComponent("task-name").state.value = name;
            this.startTracker(event);
        }
    }

    async startTracker(event) {
        this.state.name = this.getComponent("task-name").state.value;

        if(this.state.name === null || this.state.name.length === 0) {
            this.emit("push", {title: "Warning", message:"Unable to start tracker, no task name given."})
            return;
        }

        this.state.tracking = true;
        this.state.startTime = Date.now();
        this.state.now = Date.now();

        let response = await utils.post("/api/start", {
            userid: this.userid,
            name: this.state.name,
            start: this.state.startTime,
            project: this.state.project
        });

        if(!response.success) {
            console.log("Error starting tracking.");
            this.state.tracking = false;
        }
    }

    async stopTracker(event) {
        let response = await utils.post("/api/stop", {
            userid: this.userid,
            end: Date.now()
        });

        if(response.success) {
            this.state.entries.splice(0, 0, response.data);
            this.setStateDirty("entries");
            this.state.tracking = false;
            this.state.project = null;
        }
        else {
            console.log("Error stopping task!");
        }
    }

    selectProject(event) {
        if(event.value.length === 0) {
            return;
        }

        this.state.project = event.value;
    }

    removeProject() {
        this.state.project = null;
    }
}

ui-container centered paddedwide
    ui-linear-layout vertical fillspace fullwidth gutter="8px"
        @element fillspace
            ui-heading heading=1 -- Time Tracker
            ui-spacer
        @element fillspace fullwidth
            ui-linear-layout fillspace fullwidth accent paddedwide rounded aligncenter outlined
                @element fillspace
                    if(!state.tracking)
                        ui-textbox.blended key="task-name" placeholder="Task Name"
                    else
                        ui-linear-layout aligncenter
                            @element fillspace
                                ui-text alignleft -- ${state.name}
                            if(state.project)
                                $ let project = state.projects[state.project]||{};
                                @element
                                    ui-text.project-tag alignleft accent rounded padded theme={'--font-size': '0.75em', '--accent-1': project.color} -- ${project.name||null}
                            @element
                                ui-spacer
                            @element
                                ui-time alignright showseconds=true milliseconds=(state.now - state.startTime)
                if(!state.tracking)
                    if(state.project)
                        $ let project = state.projects[state.project];
                        @element
                            ui-linear-layout accent rounded theme={'--accent-1': project.color} aligncenter
                                @element
                                    ui-text alignleft padded -- ${project.name||null}
                                @element
                                    ui-button rounded icon="delete" on-click("removeProject")
                    @element
                        if(!state.tracking)
                            $ let options = Object.values(state.projects).map((item)=>{return {text: item.name, value: item._id}});
                            ui-select id="project-select" includeblank options=options key='task-project' on-input('selectProject') default="Add a project"
                @element
                    ui-button trailingicon=state.tracking?"pause":"play" text=state.tracking?"STOP":"START" on-click(state.tracking?"stopTracker":"startTracker") rounded accent
        @element fillspace
            ui-linear-layout vertical gutter="8px"
                for|entry, index| of=state.entries
                    if((index>0 && new Date(state.entries[index-1].start).getDate() !== new Date(entry.start).getDate()) || index === 0)
                        @element padded key=entry._id+"header"
                            ui-spacer
                            ui-linear-layout aligncenter
                                @element fillspace
                                    ui-heading alignleft heading=3
                                        ui-date milliseconds=entry.start time=false
                    @element paddedwide alignleft key=entry._id rounded outlined accent
                        $ const controls = [{title:"Continue task", name:"continue", icon:"play"}];
                        $ const overlaycontrols = [
                            {title:"Delete entry", name:"delete", icon:"delete"}, 
                            {title:"Edit entry", name:"edit", icon:"edit-2"},
                            entry.status==="untracked"?{title:"Mark todo", name:"todo", icon:"flag"}:{title:"Mark completed", name:"complete", icon:"check"}
                        ];
                        entry index=index key="entry_"+entry._id edit=(state.editid===entry._id) entry=entry controls=controls overlaycontrols=overlaycontrols on-delete("confirmDeleteEntry") on-continue("continueTask") on-todo("markTaskTodo") on-edit("editEntry") on-cancel("cancelEdit") on-save("saveEntry")