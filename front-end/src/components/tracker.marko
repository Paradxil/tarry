import utils from '../utils.js';

class {
    async onCreate(input) {
        this.state = {
            tracking: false,
            startTime: null,
            project: null,
            now: Date.now(),
            name: "",
            entries: input.entries,
            projects: input.projects
        };

        this.userid = input.user?input.user._id||null:null;

        if(this.userid !== null) {
            this.getData();
        }
        else {
            this.emit('logout');
            return;
        }

        window.setInterval(()=>this.state.now = Date.now(), 500);
    }

    async getData() {
        let response = utils.get("/api/task/active/"+this.userid);

        if(response.success) {
            let task = response.data;
            this.state.tracking = true;
            this.state.startTime = task.start;
            this.state.name = task.name;
            this.state.project = task.project;
        }
    }

    onInput(input) {
        if(input.entries) {
            this.state.entries = input.entries;
        }
        if(input.projects) {
            this.state.projects = input.projects;
        }
    }

    async deleteEntry(id, index) {
        let response = await utils.delete("/api/time/"+id);

        if(response.success) {
            this.state.entries.splice(index, 1);
            this.setStateDirty("entries");
        }
    }

    async markTaskTodo(id, index) {
        let response = await utils.post("/api/task/status", {
            userid: this.userid,
            taskid: id,
            status: "todo"
        });

        if(response.success) {
            for(let entry of this.input.entries) {
                if(entry.taskid === id) {
                    entry.status = "todo";
                }
            }
            this.state.entries = this.input.entries;
        }
    }

    async continueTask(name, project, event) {
        if(!this.state.tracking) {
            this.state.project = project;
            this.getComponent("task-name").state.value = name;
            this.startTracker(event);
        }
    }

    async startTracker(event) {
        this.state.name = this.getComponent("task-name").state.value;

        if(this.state.name === null || this.state.name.length === 0) {
            return;
        }

        this.state.tracking = true;
        this.state.startTime = Date.now();
        this.state.now = Date.now();

        let response = await utils.post("/api/start", {
            userid: this.userid,
            name: this.state.name,
            start: this.state.startTime,
            project: this.state.project
        });

        if(!response.success) {
            console.log("Error starting tracking.");
            this.state.tracking = false;
        }
    }

    async stopTracker(event) {
        let response = await utils.post("/api/stop", {
            userid: this.userid,
            end: Date.now()
        });

        if(response.success) {
            console.log(response.data);
            this.state.entries.splice(0, 0, response.data);
            this.setStateDirty("entries");
            this.state.tracking = false;
            this.state.project = null;
        }
        else {
            console.log("Error stopping task!");
        }
    }

    selectProject(event) {
        if(event.value.length === 0) {
            return;
        }

        this.state.project = event.value;
    }

    removeProject() {
        this.state.project = null;
    }
}

style {
    .overlay-wrapper {
        position: relative;
    }

    .overlay-wrapper:hover > .overlay, .overlay:hover{
        opacity: 1;
    }

    .overlay {
        transition: 0.25s opacity;
        position: absolute;
        top: calc(0px - var(--padding));
        right: 100%;
        padding: var(--padding);
        opacity: 0;
        background-color: rgba(255,255,255,0.7);
        backdrop-filter: blur(2px);
    }
}

$ const getNiceTime = function(millseconds, full=false) {
    let seconds = Math.floor(millseconds/1000);
    let minutes = Math.floor(seconds/60);
    let hours = Math.floor(minutes/60);
    let days = Math.floor(hours/24);

    seconds = seconds - minutes*60;
    minutes = minutes - hours*60;
    hours = hours - days*24;

    let time = "";

    if(days > 0) {
        time += days + " ";
    }

    if(hours > 0 || full) {
        time += hours + ":";
    }

    if(hours > 0 || minutes > 0 || full) {
        if(minutes < 10 && (hours > 0 || full)) {
            time += "0" + minutes;
        }
        else {
            time += minutes
        }
        time += ":";
    }

    time += (seconds<10&&(minutes>0||hours>0||full))?"0"+seconds:seconds;

    return time;
}

$ const getNiceDate = function(millseconds) {
    let date = new Date(millseconds);
    return (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();
}


$ const getNiceHour = function(millseconds) {
    let date = new Date(millseconds);
    return (date.getHours()===0?'00':date.getHours()) + ":" + (date.getMinutes() < 10 ? "0" : '') + date.getMinutes();
}

ui-container centered paddedwide
    ui-linear-layout vertical fillspace fullwidth gutter="8px"
        @element fillspace
            ui-heading -- Time Tracker
            ui-spacer
        @element fillspace fullwidth
            ui-linear-layout fillspace fullwidth accent paddedwide rounded aligncenter outlined
                @element fillspace
                    if(!state.tracking)
                        ui-textbox.blended key="task-name" placeholder="Task Name"
                    else
                        ui-linear-layout aligncenter
                            @element fillspace
                                ui-text alignleft -- ${state.name}
                            if(state.project)
                                $ let project = state.projects[state.project]||{};
                                @element
                                    ui-text.project-tag alignleft accent rounded padded theme={'--font-size': '0.75em', '--accent-1': project.color} -- ${project.name||null}
                            @element
                                ui-spacer
                            @element
                                ui-text alignright -- ${getNiceTime(state.now - state.startTime, true)}
                if(!state.tracking)
                    if(state.project)
                        $ let project = state.projects[state.project];
                        @element
                            ui-linear-layout accent rounded theme={'--accent-1': project.color} aligncenter
                                @element
                                    ui-text alignleft padded -- ${project.name||null}
                                @element
                                    ui-button rounded icon="delete" on-click("removeProject")
                    @element
                        if(!state.tracking)
                            $ let options = Object.values(state.projects).map((item)=>{return {text: item.name, value: item._id}});
                            ui-select id="project-select" options=options key='task-project' on-input('selectProject') default="Add a project"
                @element
                    ui-button trailingicon=state.tracking?"pause":"play" text=state.tracking?"STOP":"START" on-click(state.tracking?"stopTracker":"startTracker") rounded accent
        @element fillspace
            ui-linear-layout vertical gutter="8px"
                for|entry, index| of=state.entries
                    if((index>0 && new Date(state.entries[index-1].start).getDate() !== new Date(entry.start).getDate()) || index === 0)
                        @element padded key=entry._id+"header"
                            ui-spacer
                            ui-linear-layout aligncenter
                                @element fillspace
                                    ui-heading alignleft heading=3 -- ${getNiceDate(entry.start)}
                    @element paddedwide alignleft key=entry._id rounded outlined accent
                        ui-linear-layout aligncenter class="task-wrapper"
                            @element fillspace
                                ui-text -- ${entry.name}
                            if(entry.project)
                                $ let project = state.projects[entry.project]||entry.project;
                                @element key=id
                                    ui-text.project-tag alignleft accent rounded padded theme={'--font-size': '0.75em', '--accent-1': project.color} -- ${project.name||null}
                            @element
                                $ if(!entry.nicestart) {
                                    entry.nicestart = getNiceHour(entry.start);
                                }
                                $ if(!entry.niceend) {
                                    entry.niceend = getNiceHour(entry.end);
                                }
                                ui-text -- ${entry.nicestart} - ${entry.niceend}
                            @element
                                $ if(!entry.nicetotal) {
                                    entry.nicetotal = getNiceTime(entry.end - entry.start, true);
                                }
                                ui-text -- ${entry.nicetotal}
                            @element class="overlay-wrapper"
                                ui-linear-layout class="overlay"
                                    @element
                                        ui-button icon=entry.status==="untracked"?"plus":"check" rounded title="Mark as todo" on-click("markTaskTodo", entry.taskid, index)
                                    @element
                                        ui-button icon="delete" rounded title="Delete task" on-click("deleteEntry", entry._id, index)
                                ui-button icon="play" rounded title="Continue" on-click("continueTask", entry.name, entry.project)