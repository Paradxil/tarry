import Index from "<index>"
import Settings from "<settings>"
import Login from "<login>"
import Register from "<register>"
import Tracker from "<tracker>"
import Projects from "<projects>"
import Invoices from "<invoices>"
import Todo from "<todo>"
import Reports from "<reports>"
import Invoice from "<invoice>"

import utils from '../utils.js'

class {
    async onCreate() {
        this.state = {
            pages: {"invoice": Invoice, "login": Login, "register" :Register, "settings": Settings, "tracker": Tracker, 'projects': Projects, "invoices": Invoices, "todo": Todo, "index": Index, "reports": Reports},
            page: "index",
            user: null,
            loggedin: false,
            collapsed: false,
            pageLoading: false,
            ismobile: false,
            entries: [],
            projects: [],
            projectsMap: {},
            notifications: [],
            confirmations: []
        };
    }

    async onMount() {
        window.setInterval(this.checkStatus.bind(this), 1000 * 60); //Todo: remove this and save when the user will be logged out as a cookie.

        window.addEventListener("resize", this.onScreenResize.bind(this));
        this.state.ismobile = window.innerWidth<600||screen.width<600;

        if(this.state.ismobile) {
            this.state.collapsed = true;
        }

        let currentPage = window.location.pathname||null;
        currentPage = currentPage.split('/')[1]||null;

        if(currentPage !== null && currentPage.length === 0) {
            currentPage = null;
        }

        this.changePage(currentPage||"index");

        let response = await utils.get("/api/user");

        if(response.success) {
            this.state.loggedin = true;
            this.state.user = response.data;

            this.getData();

            this.changePage(currentPage||"tracker");
        }
    }

    onScreenResize(event) {
        this.state.ismobile = window.innerWidth<600||screen.width<600;
    }

    login(event) {
        this.state.user = event.user;
        this.state.loggedin = true;
        this.changePage("tracker");
        this.getData();
    }

    async getData() {
        let response = await utils.post("/api/time/", {
            userid: this.state.user._id,
            max: 1000,
            last: null
        });

        if(response.success) {
            this.state.entries = response.data;
        }

        response = await utils.get("/api/project/all/");

        if(response.success) {
            this.state.projects = response.data;

            this.state.projectsMap = {};
            for(let project of this.state.projects) {
                this.state.projectsMap[project._id] = project;
            }
        }
    }

    logout(event) {
        this.state.user = null;
        this.state.loggedin = false;
        this.state.entries = [];
        this.state.projects = [];
        this.state.projectsMap = {};
        this.changePage("login");
    }

    async logoutUser() {
        let response = await utils.post("/api/logout");

        if(response.success) {
            this.logout(event);
        }
    }

    changePage(page) {
        //this.state.pageLoading = true;
        this.state.page = page;
        this.setStateDirty("page");

        this.emit('changetitle', page + " - Time Tracker")

        window.history.replaceState({}, page, "/" + page + "/" + document.location.search);
    }

    async checkStatus() {
        let response = await utils.get("/api/status");

        if(response.success) {
            if(!response.data.loggedin && this.state.loggedin) {
                this.logout();
            }
        }
        else {
            //TODO: Display banner message to user
            console.log("Error connecting to server.");
        }
    }

    pushNotification(event) {
        this.state.notifications.splice(0,0,{title: event.title||"Notification", message: event.message||"", id:Date.now()});
        window.setTimeout(()=>{this.state.notifications.pop();this.setStateDirty("notifications");}, event.timeout?event.timeout*1000:1000*7);
        this.setStateDirty("notifications");
    }

    pushConfirmation(event) {
        this.state.confirmations.push({title: event.title||"Confirmation", message: event.message||"", actions: event.actions||[]});
        this.setStateDirty("confirmations");
    }

    closeConfirmation(event) {
        this.state.confirmations.splice(0,1);
        this.setStateDirty("confirmations");
    }

    confirmationCallback(action) {
        this.closeConfirmation();
        return action.callback?action.callback():console.log("No callback provided.");
    }

    sidebarItemClick(event) {
        if(event.item.page != null) {
            this.changePage(event.item.page);
        }
        else if(event.item.action != null && event.item.action === "logout") {
            this.logoutUser();
        }
        else {
            this.state.collapsed = !this.state.collapsed;
        }

        if(this.state.ismobile) {
            this.state.collapsed = true;
        }
    }

    toggleSidebar() {
        this.state.collapsed = !this.state.collapsed;
    }

    pageLoaded() {
        this.state.pageLoading = false;
    }
}

style {
    html {
    -webkit-print-color-adjust: exact;
    }

    :root {
        /*
        --background-1: #f8f4f1;
        --background-2: #9a8c98;
        --accent-1: #ebddd6;
        --accent-2: #9a8c98;
        --text-1: #444;
        --text-2: #fff;
        */
        --content-width: 1200px;
        --primary: #fff;
        --primary-dark: #f1f3f5;
        --secondary: #74c0fc; /*#ffa8a8;*/
        --accent-1: #fff;
        --tertiary: #66d9e8; /*#ffa8a8;*/
        --text-dark: #495057;
        --text-light: #fff;
        --border: #dee2e6;
        --rounded-radius: 5px;
        --padding: 8px;
        --padding-narrow: 4px;
        --padding-wide: 16px;
        --text-font: 'Montserrat', sans-serif;
        --button-font: 'Montserrat', sans-serif;
        --header-font: 'Montserrat', sans-serif;
        --font-size-h1: 2.5em;
    }

    h1, h2, h3, h4, h5, h6 {
        font-weight: 100;
    }

    .page {
    }

    .page-wrapper {
        position: relative;
    }

    .page-loading {
        padding: 0px !important;
        max-height: 0px;
        overflow: hidden;
    }

    .loading-overlay {
        position: absolute;
        padding-top: 40vh;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        z-index: 500;
        display: flex;
        place-content: center;
        background-image: linear-gradient(45deg, var(--tertiary), var(--secondary));
    }

    .site-title {
        font-size: 24px;
        padding-bottom: 20px;
    }

    .top-bar {
        position: fixed;
        top: 0px;
        left: 0px;
        width: 100%;
        font-size: 28px;
        z-index: 400;
        text-transform: capitalize;
    }

    .top-bar .ui-icon {
        --feather-icon-stroke-width: 1px;
    }

    .top-bar .ui-heading {
        font-weight: 100;
    }

    .page-footer {
        max-width: var(--content-width);
    }

    .ui-sidebar .ui-icon {
        --feather-icon-stroke-width: 1px;
        font-size: 28px;
    }

    .ui-sidebar {
        margin-right: calc(var(--padding-wide) * 2);
        min-width: unset !important;
        box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
    }

    .ui-sidebar .ui-linear-layout-child {
        overflow-y: clip;
    }

    .ui-sidebar .ui-linear-layout-child.accent .ui-list-item {
        box-shadow: 0px 0px 15px var(--secondary);
    }

    .ui-sidebar .ui-button:hover {
        background-color: #868e96;
    }

    .ui-sidebar .ui-list-item:hover {
        box-shadow: 0px 0px 5px #868e96 !important;
    }

    .ui-sidebar .ui-button {
        padding: var(--padding-wide) var(--padding-wide);
    }

    .ui-sidebar .ui-button:not(.site-title) .ui-text {
        padding-left: var(--padding-wide);
    }

    .ui-textbox, .ui-submit {
        outline: none;
        border: none;
        border-bottom: 1px solid var(--border);
        padding: 15px !important;
        border-bottom-left-radius: 0px;
        border-bottom-right-radius: 0px;
    }

    .ui-textbox:hover, .ui-textbox:focus {
        border-bottom: 1px solid var(--primary-light);
    }

    .blended {
        background-color: inherit;
        border: none;
        color: inherit;
        font-family: var(--text-font);
        border-bottom: 1px solid rgba(0,0,0,0.25);
        border-radius: 0px;
    }

    .notifications-wrapper {
        position: fixed;
        bottom: 8px;
        right: 8px;
        z-index: 100;
    }

    .notification {
        animation-name: fadeup;
        animation-duration: 0.5s;
        animation-timing-function: ease-in-out;
    }

    .confirmation-wrapper {
        position: fixed;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        z-index: 100;
        background-color: rgba(0,0,0,0.25);
    }

    .confirmation-dialogue {
        max-width: 500px;
    }

    .wiggle:hover > * {
        animation-name: wiggle;
        animation-duration: 0.75s;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
    }

    .wiggle-right:hover > * {
        animation-name: wiggleright;
        animation-duration: 0.75s;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
    }

    .animation-popup:hover > * {
        animation-name: popup;
        animation-duration: 0.75s;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
    }

    .animation-popright:hover > * {
        animation-name: popright;
        animation-duration: 0.75s;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
    }

    .animation-slideinout:hover > * {
        animation-name: slideoutin;
        animation-duration: 0.75s;
        animation-timing-function: ease-in-out;
        animation-fill-mode: forwards;
    }

    @keyframes fadeup {
        0%   {opacity: 0; transform: translateY(10px);}
        100% {opacity: 1; transform: translateY(0px);}
    }

    @keyframes popup {
        0%   {transform: translateY(0px);}
        40%   {transform: translateY(20%);}
        100% {transform: translateY(10%);}
    }

    @keyframes popright {
        0%   {transform: translateX(0px);}
        40%   {transform: translateX(20%);}
        100% {transform: translateX(10%);}
    }

    @keyframes wiggle {
        0% {transform: rotate(0deg);}
        50% {transform: rotate(-40deg);}
        100% {transform: rotate(-20deg);}
    }

    @keyframes wiggleright {
        0% {transform: rotate(0deg);}
        50% {transform: rotate(50deg);}
        100% {transform: rotate(30deg);}
    }

    @keyframes slideoutin {
        0% {transform: translateY(0px); opacity: 1;}
        49% {transform: translateY(30%); opacity: 0;}
        50% {transform: translateY(-30%); opacity: 0;}
        100% {transform: translateY(0%); opacity: 1;}
    }

    @media screen and (max-width: 600px) {
        .page {
            padding-top: 60px;
        }

        .ui-linear-layout {
            max-width: 100%;
        }
    }
}

ui-linear-layout.notifications-wrapper vertical
    for|notification| of=state.notifications
        @element class="notification" key=notification.id
            ui-card rounded accent raised
                @header title=notification.title heading=3 accent padded
                ui-text padded -- ${notification.message}

if(state.confirmations.length > 0)
    $ let confirmation = state.confirmations[0];
    ui-linear-layout.confirmation-wrapper vertical centered
        @element class="confirmation-dialogue"
            ui-card rounded accent raised
                @header accent padded
                    ui-linear-layout fillspace
                        @element fillspace placecenter
                            ui-heading heading=3 alignleft -- ${confirmation.title}
                        @element
                            ui-button icon="x" on-click("closeConfirmation")
                ui-text padded alignleft -- ${confirmation.message}
                ui-linear-layout padded centered
                    for|action| of=confirmation.actions
                        @element
                            ui-button rounded text=action.text trailingicon=action.icon on-click("confirmationCallback", action)

if(state.ismobile)
    ui-linear-layout.top-bar filled aligncenter padded raised
        @element
            ui-button icon="menu" rounded on-click("toggleSidebar")
        @element fillspace centered
            ui-heading -- ${state.page}
        @element
            ui-button rounded icon="user" on-click("changePage", "account")
if(state.loggedin)
    ui-sidebar collapsed=state.ismobile?false:state.collapsed hidden=state.ismobile?state.collapsed:false on-itemclick("sidebarItemClick") overlay=state.ismobile
        @item.site-title icon=state.ismobile?"chevron-left":"menu" text="Time Tracker"
        @item icon="user" text=state.user?state.user.username||"loading...":"loading..." page="account"
        @item text="Tracker" icon="clock" page="tracker" accent=state.page==="tracker"
        @item text="Todo" icon="list" page="todo" accent=state.page==="todo"
        @item text="Projects" icon="clipboard" page="projects" accent=state.page==="projects"
        @item text="Invoice" icon="file" page="invoices" accent=state.page==="invoices"
        @item text="Reports" icon="bar-chart-2" page="reports" accent=state.page==="reports"
        @item text="Settings" icon="settings" page="settings" accent=state.page==="settings"
        @item text="Log Out" icon="log-out" action="logout"
ui-linear-layout.page-wrapper fillspace vertical
    if(state.pageLoading)
        @element
            div.loading-overlay
                loading-spinner
    if(!state.loggedin)
        @element fullwidth
            ui-linear-layout padded aligncenter gutter="4px" fillspace
                @element
                    ui-button rounded text="Time Tracker" accent=state.page==='index' on-click("changePage", 'index') title="Home"
                @element fillspace
                @element
                    ui-button.animation-popup rounded outlined accent=state.page==='login' icon="log-in" on-click('changePage', 'login') title="Login"
                @element
                    ui-button.animation-popup rounded outlined accent=state.page==='register' icon="user-plus" on-click("changePage", 'register') title="Register"
    @element class={'page': state.page!=='index', 'page-loading': state.pageLoading} fullwidth fillspace
        page-background
        context user=state.user entries=state.entries projects=state.projectsMap
            <${state.pages[state.page]} key=state.page on-login("login") on-logout("logout") on-pageloaded("pageLoaded") on-push("pushNotification") on-confirm("pushConfirmation") user=state.user entries=state.entries projects=state.projectsMap/>
    @element.page-footer fullwidth alignleft paddedwide
        ui-linear-layout fillspace filled rounded paddedwide raised aligncenter
            @element fillspace alignleft
                ui-text -- Copyright 2021 Hunter Stratton
            @element alignright
                ui-button href="https://github.com/Paradxil/time-tracker" rounded icon="github"