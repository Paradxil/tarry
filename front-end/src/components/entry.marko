class {
    onCreate(input) {
        this.state = {
            entry: input.entry||{},
            original: JSON.parse(JSON.stringify(input.entry))
        }
    }

    onAction(type, id, entry) {
        this.emit(type, {id: id, entry: entry, index:this.input.index||null});
    }

    onCancel() {
        this.state.entry = JSON.parse(JSON.stringify(this.state.original));
        this.onAction("cancel", this.state.entry._id, this.state.original);
    }

    onSave() {
        let name = this.getComponent("task-name").state.value;

        if(name.length > 0) {
            this.state.entry.name = name;
        }

        this.emit("save", {id: entry._id, entry: this.state.entry, index:this.input.index||null});
    }
    
    selectProject(event) {
        if(event.value.length === 0) {
            return;
        }

        this.state.entry.project = event.value;
    }

    removeProject() {
        this.state.entry.project = null;
    }

    setStart(event) {
        this.state.entry.start = event.value;
    }

    setEnd(event) {
        this.state.entry.end = event.value;
    }
}

style {
    .overlay-wrapper {
        position: relative;
    }

    .overlay-wrapper:hover > .overlay, .overlay:hover{
        opacity: 1;
    }

    .overlay {
        transition: 0.25s opacity;
        position: absolute;
        top: calc(0px - var(--padding));
        right: 100%;
        padding: var(--padding);
        opacity: 0;
        background-color: rgba(255,255,255,0.7);
        backdrop-filter: blur(2px);
    }
}

context|{projects}, emit| from="app"
    ui-linear-layout aligncenter class="task-wrapper"
        @element fillspace
            if(input.edit)
                ui-textbox.blended placeholder="Task Name" key="task-name" value=state.entry.name||input.text
            else
                ui-text -- ${state.entry.name||input.text}
        if(state.entry.project)
            $ let project = projects[state.entry.project]||{};
            @element
                ui-linear-layout accent rounded theme={'--accent-1': project.color} aligncenter
                    @element
                        ui-text alignleft padded -- ${project.name||null}
                    if(input.edit)
                        @element
                            ui-button rounded icon="delete" on-click("removeProject")
        if(input.edit && !state.entry.project)
            @element
                $ let options = Object.values(projects).map((item)=>{return {text: item.name, value: item._id}});
                ui-select id="project-select" includeblank options=options key='task-project' on-input('selectProject') default="Add a project"
        @element
            if(input.edit)
                ui-linear-layout
                    @element
                        ui-date-select milliseconds=state.entry.start date=false rounded key="start" on-input("setStart")
                    @element
                        ui-text -- -
                    @element
                        ui-date-select milliseconds=state.entry.end date=false rounded key="end" on-input("setEnd")
            else
                ui-linear-layout
                    @element
                        ui-date milliseconds=state.entry.start date=false
                    @element
                        ui-text -- -
                    @element
                        ui-date milliseconds=state.entry.end date=false
        @element
            ui-time milliseconds=(state.entry.end-state.entry.start)
        @element class="overlay-wrapper"
            if(input.edit)
                ui-linear-layout
                    @element
                        ui-button rounded trailingicon="x" title="Cancel" on-click("onCancel")
                    @element
                        ui-button rounded trailingicon="save" title="Save" on-click("onSave")
            else
                ui-linear-layout class="overlay"
                    for|action| of=input.overlaycontrols||[]
                        @element
                            ui-button icon=action.icon rounded title=action.title on-click("onAction", action.name, state.entry._id, state.entry)
                ui-linear-layout
                    for|action| of=input.controls||[]
                        @element
                            ui-button icon=action.icon rounded title=action.title on-click("onAction", action.name, state.entry._id, state.entry)